"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiPlannerService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const user_preference_service_1 = require("../../user-preference/user-preference.service");
const exam_service_1 = require("../../exam/exam.service");
const notion_service_1 = require("../../notion/notion.service");
const llm_client_service_1 = require("../server/llm-client.service");
const date_utils_1 = require("./utils/date-utils");
let AiPlannerService = class AiPlannerService {
    configService;
    userPreferenceService;
    examService;
    notionService;
    llmClient;
    constructor(configService, userPreferenceService, examService, notionService, llmClient) {
        this.configService = configService;
        this.userPreferenceService = userPreferenceService;
        this.examService = examService;
        this.notionService = notionService;
        this.llmClient = llmClient;
    }
    async generateStudyPlanByUserId(userId) {
        console.log('üì• generateStudyPlanByUserId called for:', userId);
        const preference = await this.userPreferenceService.findByUserId(userId);
        const style = await this.userPreferenceService.getStyle(userId);
        const { exams } = await this.examService.findByUser(userId);
        if (!preference || !exams || exams.length === 0) {
            throw new common_1.InternalServerErrorException('‚ùå Ïú†Ï†Ä Ï†ïÎ≥¥ ÎòêÎäî ÏãúÌóò Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.');
        }
        const databaseId = this.configService.get('DATABASE_ID');
        if (!databaseId)
            throw new common_1.InternalServerErrorException('‚ùå DATABASE_ID ÎàÑÎùΩ');
        const useLLM = this.configService.get('USE_LLM')?.toLowerCase() === 'true';
        console.log('üß™ USE_LLM =', useLLM);
        const mergedSubjects = this.mergeSubjects(exams);
        console.log('üß™ mergedSubjects count:', mergedSubjects.length);
        const slices = this.flattenChapters(mergedSubjects);
        console.log('üß™ Total chapter slices:', slices.length);
        const dates = (0, date_utils_1.getAllStudyDates)(mergedSubjects, preference.studyDays);
        console.log('üß™ Study dates:', dates);
        let rawPlans = [];
        if (useLLM) {
            try {
                const prompt = this.createPromptWithConstraints(slices, dates, preference, style);
                console.log('üì§ Generated prompt for LLM:', prompt);
                rawPlans = await this.llmClient.generate(prompt);
                console.log('üì• LLM raw response received:', rawPlans);
                if (!Array.isArray(rawPlans))
                    throw new Error('Invalid LLM output');
            }
            catch (e) {
                console.warn('‚ö†Ô∏è LLM Ïã§Ìå® - fallback ÏÇ¨Ïö©:', e.message);
                rawPlans = this.assignChaptersByRule(slices, dates, preference.sessionsPerDay);
                console.log('‚úÖ fallback generated plan count:', rawPlans.length);
            }
        }
        else {
            console.log('‚ö†Ô∏è USE_LLM=false ÏÑ§Ï†ï - fallback Ïã§Ìñâ');
            rawPlans = this.assignChaptersByRule(slices, dates, preference.sessionsPerDay);
            console.log('‚úÖ fallback generated plan count:', rawPlans.length);
        }
        const results = this.groupDailyPlansBySubject(userId, databaseId, mergedSubjects, rawPlans);
        for (const result of results) {
            console.log('üìå Notion ÎèôÍ∏∞Ìôî ÏãúÏûë for subject:', result.subject);
            await this.notionService.syncToNotion(result);
            console.log('üìå Notion ÎèôÍ∏∞Ìôî ÏôÑÎ£å for subject:', result.subject);
        }
        console.log('‚úÖ Ï†ÑÏ≤¥ Í≥ºÏ†ï ÏôÑÎ£å. Í≤∞Í≥º Í∞úÏàò:', results.length);
        return this.mapResponseForClient(results);
    }
    mapResponseForClient(results) {
        return results.map(({ subject, startDate, endDate, dailyPlan }) => ({
            subject,
            startDate,
            endDate,
            dailyPlan,
        }));
    }
    groupDailyPlansBySubject(userId, databaseId, subjects, llmResponse) {
        const groupedBySubject = {};
        for (const item of llmResponse) {
            const subjectKey = item.subject;
            if (!groupedBySubject[subjectKey]) {
                const matched = subjects.find(s => s.subject === subjectKey);
                if (!matched)
                    throw new Error(`‚ùå Í≥ºÎ™© ÏùºÏπò Ïã§Ìå®: ${subjectKey}`);
                groupedBySubject[subjectKey] = {
                    userId,
                    subject: subjectKey,
                    startDate: matched.startDate,
                    endDate: matched.endDate,
                    dailyPlan: [],
                    databaseId,
                };
            }
            groupedBySubject[subjectKey].dailyPlan.push(`${item.date}: ${item.content}`);
        }
        return Object.values(groupedBySubject);
    }
    mergeSubjects(exams) {
        const grouped = {};
        for (const exam of exams) {
            const key = exam.subject;
            if (!grouped[key]) {
                grouped[key] = {
                    subject: exam.subject,
                    startDate: exam.startDate,
                    endDate: exam.endDate,
                    chapters: [...exam.chapters],
                };
            }
            else {
                grouped[key].startDate = new Date(exam.startDate) < new Date(grouped[key].startDate)
                    ? exam.startDate
                    : grouped[key].startDate;
                grouped[key].endDate = new Date(exam.endDate) > new Date(grouped[key].endDate)
                    ? exam.endDate
                    : grouped[key].endDate;
                grouped[key].chapters.push(...exam.chapters);
            }
        }
        return Object.values(grouped);
    }
    sliceChapter(chapter) {
        const { chapterTitle, contentVolume } = chapter;
        const pagesPerSlice = 10;
        const slices = [];
        let pageStart = 1;
        while (pageStart <= contentVolume) {
            const pageEnd = Math.min(pageStart + pagesPerSlice - 1, contentVolume);
            slices.push({
                title: chapterTitle,
                pageRange: `(p.${pageStart}-${pageEnd})`,
                subject: '',
            });
            pageStart = pageEnd + 1;
        }
        return slices;
    }
    flattenChapters(subjects) {
        const slices = [];
        for (const subject of subjects) {
            for (const chapter of subject.chapters) {
                const chapterSlices = this.sliceChapter(chapter);
                slices.push(...chapterSlices.map(slice => ({ ...slice, subject: subject.subject })));
            }
        }
        return slices;
    }
    createPromptWithConstraints(slices, allowedDates, pref, style) {
        const lines = [];
        lines.push(`ÎÑàÎäî AI ÌïôÏäµ Í≥ÑÌöç ÏÉùÏÑ±Í∏∞Ïïº.`);
        lines.push(`Îã§Ïùå Ï±ïÌÑ∞ Î™©Î°ùÏùÑ Í∞ÄÎä•Ìïú ÎÇ†ÏßúÏóê ÎßûÏ∂∞ Ï†ÅÏ†àÌûà Î∂ÑÎ∞∞Ìï¥.`);
        lines.push(`Ï°∞Í±¥ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏïÑ:`);
        lines.push(`- ÌïòÎ£® ÏµúÎåÄ ${pref.sessionsPerDay || 2}Í∞úÏùò Ï±ïÌÑ∞ÍπåÏßÄÎßå Î∞∞Ï†ï Í∞ÄÎä•`);
        lines.push(`- Í∞ÄÎä•Ìïú ÎÇ†Ïßú: ${allowedDates.join(', ')}`);
        if (style === 'focus') {
            lines.push(`- ÌïòÎ£®ÏóêÎäî Î∞òÎìúÏãú ÌïòÎÇòÏùò Í≥ºÎ™©Îßå Ìè¨Ìï®ÎêòÎèÑÎ°ù Íµ¨ÏÑ±Ìï¥Ï§ò`);
        }
        lines.push(`- Ï∂úÎ†•ÏùÄ Î∞òÎìúÏãú JSON Î∞∞Ïó¥ ÌòïÏãù, Ìï≠Î™©ÏùÄ subject, date, contentÎßå Ìè¨Ìï®Ìï¥Ïïº Ìï¥`);
        lines.push(`- ÏÑ§Î™ÖÏù¥ÎÇò printÎ¨∏, ÏΩîÎìúÎ∏îÎü≠ Ìè¨Ìï®ÌïòÏßÄ Îßà`);
        lines.push(`\nÏ±ïÌÑ∞ Î™©Î°ù:`);
        slices.forEach((s, i) => {
            lines.push(`${i + 1}. ${s.subject} - ${s.title} ${s.pageRange}`);
        });
        return lines.join('\n');
    }
    assignChaptersByRule(slices, studyDates, maxPerDay) {
        const result = [];
        let i = 0;
        const sortedDates = [...studyDates].sort((a, b) => {
            const aD = new Date(`2025-${a}`);
            const bD = new Date(`2025-${b}`);
            return aD.getTime() - bD.getTime();
        });
        console.log('üìÜ fallback slices:', slices.length);
        console.log('üìÜ fallback dates:', sortedDates);
        for (const date of sortedDates) {
            for (let j = 0; j < maxPerDay && i < slices.length; j++, i++) {
                const s = slices[i];
                result.push({
                    subject: s.subject,
                    date,
                    content: `${s.title} ${s.pageRange}`,
                });
            }
            if (i >= slices.length)
                break;
        }
        if (result.length < slices.length) {
            console.warn(`‚ö†Ô∏è fallback Í≥ÑÌöçÏù¥ Ï†ÑÏ≤¥ slice ${slices.length}Í∞ú Ï§ë ${result.length}Í∞úÎßå Î∞∞Ï†ïÎê®`);
        }
        return result;
    }
};
exports.AiPlannerService = AiPlannerService;
exports.AiPlannerService = AiPlannerService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService,
        user_preference_service_1.UserPreferenceService,
        exam_service_1.ExamService,
        notion_service_1.NotionService,
        llm_client_service_1.LlmClientService])
], AiPlannerService);
//# sourceMappingURL=ai-planner.service.js.map